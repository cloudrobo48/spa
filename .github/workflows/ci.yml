name: Terraform CI

on:
  pull_request:
    paths:
      - '**.tf'
      - '.github/workflows/*'

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-northeast-1

jobs:
  terraform-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.2  # 安定版。fmtやplanの挙動が安定

      - name: Terraform Init
        run: terraform init -backend-config="key=terraform/${{ github.event.inputs.environment }}/state.tfstate"

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Install tflint
        run: |
          curl -L https://github.com/terraform-linters/tflint/releases/download/v0.50.3/tflint_linux_amd64.zip -o tflint.zip
          unzip tflint.zip
          chmod +x tflint
          sudo mv tflint /usr/local/bin/
          tflint --version

      - name: Run tflint
        run: tflint --disable-rule=terraform_unused_declarations

      - name: Determine tfvars file
        id: vars
        run: |
          if [ "${{ github.base_ref }}" = "main" ]; then
            echo "TFVARS=prod.tfvars" >> $GITHUB_OUTPUT
          else
            echo "TFVARS=dev.tfvars" >> $GITHUB_OUTPUT
          fi

      # 1回目のPlan：CIチェック用（エラー検出用）
      - name: Terraform Plan (check only)
        run: terraform plan -var-file=${{ steps.vars.outputs.TFVARS }}

      # 2回目のPlan：レビュー用（plan.txtに保存）
      - name: Terraform Plan (for review)
        run: terraform plan -no-color -var-file=${{ steps.vars.outputs.TFVARS }} > plan.txt

      # PRコメントにPlan内容を投稿（レビュー担当者がPR画面で確認できる）
      - name: Comment plan on PR (update if exists)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            const header = '### Terraform Plan 📦';

            //  既存コメント一覧を取得
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            //  Terraform Plan コメントを探す
            const existing = comments.data.find(c => c.body.startsWith(header));

            const body = `${header}\n\`\`\`\n${plan}\n\`\`\``;

            if (existing) {
              //  あれば更新
              await github.rest.issues.updateComment({
                comment_id: existing.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body,
              });
            } else {
              //  なければ新規投稿
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body,
              });
            }

      #（任意）Plan出力をArtifactsに保存（ログ用途）
      # - name: Upload plan output
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: terraform-plan
      #     path: plan.txt
